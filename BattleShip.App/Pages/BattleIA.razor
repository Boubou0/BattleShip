@page "/BattleIA"
@attribute [Authorize]
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication




<PageTitle>1 VS IA</PageTitle>

@if (showDifficultySelection)
{
    <div id="difficultySelection">
        <h3>Choisissez le niveau de difficulté :</h3>
        <a class="button-21" onclick="@(() => StartGameWithDifficulty(0))" role="button">Facile</a>
        <a class="button-21 signout" onclick="@(() => StartGameWithDifficulty(2))" role="button">Impossible</a>
    </div>
}

<div id="winYoupi" class="@win" style="display: none;">
    <img src="css/images/youpi.gif" alt="Youpi" />
    <h2 id="youWin" style="display: none;"> Vous avez gagné(e) ! </h2>
    <h2 id="youLoose" style="display: none;"> Vous avez perdu(e) .. </h2>
    <a class="button-21" style="margin: 10px;"  onclick="@(() => RestartGame())" role="button">Recommencer</a>
    <a class="button-21" role="button" href="/">Menu principal</a>
</div>
@if (!showDifficultySelection)
{
    <div id="blurCard" class="blurCard back">
        <div id="backBoard" class="@classAttack">
            <table id="mainBoard">
                @for (int i = 0; i < 10; i++)
                {
                    <tr>
                        @for (int j = 0; j < 10; j++)
                        {
                            var localX = j;
                            var localY = i;
                            var cellId = $"cell_{i}_{j}";

                            string cellClass = gridPosition.ContainsKey(cellId) ? gridPosition[cellId] : "";
                            <td class="tdGame @cellClass" id="@cellId" data-X="@($"{j}")" data-Y="@($"{i}")" onclick="@(() => HandleCellClick(@localX, @localY))"><div class="plouf"></div></td>
                        }
                    </tr>
                }
            </table>
        </div>

        <div id="toolData">
                    <table id="boardPlayer" class="@classPlayer2Attack">
                        @for (int i = 0; i < 10; i++)
                        {
                            <tr>
                                @for (int j = 0; j < 10; j++)
                                {
                                    var cellId = $"player_{i}_{j}";
                                    string cellClass = playerPositions.ContainsKey(cellId) ? playerPositions[cellId] : "";
                                    <td class="tdPlayer @cellClass" id="@cellId" data-X="@j" data-Y="@i"></td>
                                }
                            </tr>
                        }
                    </table>

                <div id="dataInfo">

                    <div id="history">
                        <h3>Historique</h3>
                        <div id="historyContent">
                            <ul>
                                @* @foreach (var attack in player1Board)
                                {
                                    <li>@attack.Key</li>
                                } *@
                            </ul>
                        </div>
                    </div>

                    <div id="info">
                        <table>
                            <tr>
                                <td class="shipInfo Aship imgShipLeft"></td>
                                <td class="shipInfo Aship imgShipMid"></td>
                                <td class="shipInfo Aship imgShipMid"></td>
                                <td class="shipInfo Aship imgShipRight"></td>
                            </tr
                        </table>

                        <table>
                            <tr>
                                <td class="shipInfo Bship imgShipLeft"></td>
                                <td class="shipInfo Bship imgShipMid"></td>
                                <td class="shipInfo Bship imgShipRight"></td>
                            </tr
                        </table>

                        <table>
                            <tr>
                                <td class="shipInfo Cship imgShipLeft"></td>
                                <td class="shipInfo Cship imgShipMid"></td>
                                <td class="shipInfo Cship imgShipRight"></td>
                            </tr
                        </table>

                        <table>
                            <tr>
                                <td class="shipInfo Dship imgShipLeft"></td>
                                <td class="shipInfo Dship imgShipRight"></td>
                            </tr
                        </table>

                        <table>
                            <tr>
                                <td class="shipInfo Eship imgShipLeft"></td>
                                <td class="shipInfo Eship imgShipRight"></td>
                            </tr
                        </table>

                        <table>
                            <tr>
                                <td class="shipInfo Fship imgOneShip"></td>
                            </tr
                        </table>

                    </div>
                </div>
                
            </div>
            
        </div>
    }

    <script>
        window.playSound = function(soundFileName) {
            var audio = new Audio(soundFileName);
            audio.play();
        }

        window.stopSound = function() {
        var audio = document.querySelector("audio");
        if (audio) {
            audio.pause();
        }
    }
    </script>


@code {
    bool showDifficultySelection = true;
    string? partieId;

    string win = "";

    string classAttack = "";
    string classPlayer2Attack = "";
    Dictionary<string, List<string>> player1Board;
    Dictionary<string, string> playerPositions = new Dictionary<string, string>();

    Dictionary<string, string> gridPosition = new Dictionary<string, string>();

    CreateGameDTO content;
        
async Task StartGameWithDifficulty(int difficulty){
        showDifficultySelection = false;
        var response = await HttpClient.GetAsync($"/StartGame/{difficulty}");

        if (response.IsSuccessStatusCode)
        {
            content = await response.Content.ReadFromJsonAsync<CreateGameDTO>();
            await FetchGameData();

        }
        else
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Erreur :(");
        }
    }

    async Task StartGame(){
        var response = await HttpClient.GetAsync($"/StartGame/{1}");

        if (response.IsSuccessStatusCode)
        {
            content = await response.Content.ReadFromJsonAsync<CreateGameDTO>();
            await FetchGameData();

        }
        else
        {
           await JSRuntime.InvokeVoidAsync("console.log", "Erreur :(");
        } 
    }

    async void RestartGame(){
        win = "";
        classAttack = "";
        classPlayer2Attack = "";
        await JSRuntime.InvokeVoidAsync("stopSound");
        playerPositions = new Dictionary<string, string>();
        gridPosition = new Dictionary<string, string>();
        showDifficultySelection = true;
        StateHasChanged();
    }

    async Task FetchGameData()
    {
            partieId = content.GameId.ToString();

            foreach (var ship in content.Player1Position)
            {
                @* await JSRuntime.InvokeVoidAsync("console.log", $"Ship is {ship.Key} {partieId}"); *@
                foreach (var positionShip in ship.Value)
                {
                    var x = LetterToNumber(positionShip.Substring(0, 1));
                    var y = int.Parse(positionShip.Substring(1, 1));

                    @* await JSRuntime.InvokeVoidAsync("console.log", $"X is {x} and Y is {y}");
                    await JSRuntime.InvokeVoidAsync("console.log", $"player_{y}_{x}"); *@

                    var positionKey = $"player_{y}_{x}";
                    if (playerPositions.ContainsKey(positionKey) && playerPositions[positionKey].Contains("Hit"))
                    {
                    }
                    else
                    {
                        playerPositions[positionKey] = ship.Key + "ship shipCell";
                    }
                }
            }

    }


    int LetterToNumber(string letter)
    {
        return letter.ToUpper() switch
        {
            "A" => 0,
            "B" => 1,
            "C" => 2,
            "D" => 3,
            "E" => 4,
            "F" => 5,
            "G" => 6,
            "H" => 7,
            "I" => 8,
            "J" => 9,
            _ => -1
        };
    }

    async void HandleCellClick(int x, int y)
    {
        classPlayer2Attack = "";
        await JSRuntime.InvokeVoidAsync("console.log", $"Clicked on cell ({x}, {y}) and partieId is {partieId}");
        
        var response = await HttpClient.GetAsync($"/Attack/{partieId}/{x}/{y}");

        if (response.IsSuccessStatusCode)
        {
            @* var jsonResponse = await response.Content.ReadAsStringAsync();
            var responseObject = JsonSerializer.Deserialize<listAttackDTO>(jsonResponse); *@
            listAttackDTO responseObject = await response.Content.ReadFromJsonAsync<listAttackDTO>();


            string winner = responseObject.winner;
            AttackDTO playerMove = responseObject.playerMove;
            

            // Ataque
            if (winner != "")
            {
                win = "youEnd";
                if (winner != "Joueur 2")
                {
                    win += " youWin";
                }
                else
                {
                    win += " youLoose";
                }
                StateHasChanged(); 
            }
            else
            {

                var positionAttack = $"cell_{y}_{x}";

                // Résulat de l'attaque
                if (playerMove.AttackState == "Hit")
                {
                    await JSRuntime.InvokeVoidAsync("console.log", $"Vous avez touché un bateau");
                    @* await JSRuntime.InvokeVoidAsync("playSound", "/css/images/explosion.mp3"); // ne s'arrête pas *@ 

                    
                    gridPosition[positionAttack] = playerMove.AttackState;
                    classAttack = "attack";
                    StateHasChanged(); 
                    await Task.Delay(1500); 
                    classAttack = "";
                    StateHasChanged();
                }
                else
                {
                    gridPosition[positionAttack] = playerMove.AttackState;
                    classAttack = "";

                    await JSRuntime.InvokeVoidAsync("console.log", $"Vous avez raté votre attaque");
                    await JSRuntime.InvokeVoidAsync("playSound", "/css/images/plouf.m4a");

                     // Réponse de l'attaque

                    bool hasAttack = false;
                    foreach(AttackDTO attack in responseObject.listAiAttack){
                        var moveLabel = attack.MoveLabel;

                        if (attack.AttackState == "Hit")
                        {
                            hasAttack = true;
                            await JSRuntime.InvokeVoidAsync("playSound", "/css/images/boomAd.mp3");

                        }

                        int xMoveIA = LetterToNumber(moveLabel.Substring(0, 1));
                        int yMoveIA = int.Parse(moveLabel.Substring(1, 1));
                        string positionKey = $"player_{yMoveIA}_{xMoveIA}";

                        playerPositions[positionKey] = attack.AttackState;

                    }
                    classPlayer2Attack = hasAttack ? "attack" : "";


                    await FetchGameData(); // Rechargez les données du jeu après l'attaque
                    StateHasChanged(); 
                }
            }

            
        }
    }
}
